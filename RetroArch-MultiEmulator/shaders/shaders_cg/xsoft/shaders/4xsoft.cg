/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
   - FX11 compilers
*/

/*
   Copyright (C) 2007 guest(r) - guest.r@gmail.com

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/

/*

   The 4xSoft shader processes a gfx. surface and redraws it 4x finer.
   
   Note: set scaler to normal2x.

*/

#pragma parameter RESOLUTION_X "4xSoft Input Resolution X" 0.0 0.0 1920.0 1.0
#pragma parameter RESOLUTION_Y "4xSoft Input Resolution Y" 0.0 0.0 1920.0 1.0
#pragma parameter CONTRAST     "4xSoft Contrast"           3.0 0.0 10.0 0.1

#define RESOLUTION_X_DEF COMPAT_texture_size.x
#define RESOLUTION_Y_DEF COMPAT_texture_size.y
#ifdef PARAMETER_UNIFORM
uniform float RESOLUTION_X;
uniform float RESOLUTION_Y;
uniform float CONTRAST;
#else
#define RESOLUTION_X RESOLUTION_X_DEF
#define RESOLUTION_Y RESOLUTION_Y_DEF
#define CONTRAST 3.0
#endif

#include "../../compat_includes.inc"
uniform COMPAT_Texture2D(decal) : TEXUNIT0;
uniform float4x4 modelViewProj;

struct out_vertex
{
	float4 position : COMPAT_POS;
	float2 texCoord : TEXCOORD0;
	float4 t1 : TEXCOORD1;
	float4 t2 : TEXCOORD2;
	float4 t3 : TEXCOORD3;
	float4 t4 : TEXCOORD4;
	float4 t5 : TEXCOORD5;
	float4 t6 : TEXCOORD6;
#ifndef HLSL_4
	float4 Color    : COLOR;
#endif
};

out_vertex main_vertex(COMPAT_IN_VERTEX)
{
	out_vertex OUT;
#ifdef HLSL_4
	float4 position = VIN.position;
	float2 texCoord = VIN.texCoord;
#else
	OUT.Color = color;
#endif
	OUT.position = mul(modelViewProj, position);
	OUT.texCoord = texCoord;
	/* messy I know but we need to make it possible to have it default to input resolution x/y in case RESOLUTION_X is 0.0 */
	float2 ps = float2(1.0/((RESOLUTION_X == 0.0) ? RESOLUTION_X_DEF : RESOLUTION_X), 1.0/((RESOLUTION_Y == 0.0) ? RESOLUTION_Y_DEF : RESOLUTION_Y));

	float dx = ps.x;
	float dy = ps.y;
	float sx = ps.x * 0.5;
	float sy = ps.y * 0.5;


	OUT.t1 = float4(texCoord,texCoord) + float4(-dx, -dy, dx, -dy); // outer diag. texels
	OUT.t2 = float4(texCoord,texCoord) + float4(dx, dy, -dx, dy);
	OUT.t3 = float4(texCoord,texCoord) + float4(-sx, -sy, sx, -sy); // inner diag. texels
	OUT.t4 = float4(texCoord,texCoord) + float4(sx, sy, -sx, sy);
	OUT.t5 = float4(texCoord,texCoord) + float4(-dx, 0, dx, 0); // inner hor/vert texels
	OUT.t6 = float4(texCoord,texCoord) + float4(0, -dy, 0, dy);

	return OUT;
}

const static float3 dt = float3(1.0, 1.0, 1.0);

float4 four_xsoft(float4 t1, float4 t2, float4 t3, float4 t4, float4 t5, float4 t6, float2 texCoord, COMPAT_Texture2D(decal))
{
	float3 c11 = COMPAT_SamplePoint(decal, texCoord).xyz;
	float3 c00 = COMPAT_SamplePoint(decal, t1.xy).xyz;
	float3 c20 = COMPAT_SamplePoint(decal, t1.zw).xyz;
	float3 c22 = COMPAT_SamplePoint(decal, t2.xy).xyz;
	float3 c02 = COMPAT_SamplePoint(decal, t2.zw).xyz;
	float3 s00 = COMPAT_SamplePoint(decal, t3.xy).xyz;
	float3 s20 = COMPAT_SamplePoint(decal, t3.zw).xyz;
	float3 s22 = COMPAT_SamplePoint(decal, t4.xy).xyz;
	float3 s02 = COMPAT_SamplePoint(decal, t4.zw).xyz;
	float3 c01 = COMPAT_SamplePoint(decal, t5.xy).xyz;
	float3 c21 = COMPAT_SamplePoint(decal, t5.zw).xyz;
	float3 c10 = COMPAT_SamplePoint(decal, t6.xy).xyz;
	float3 c12 = COMPAT_SamplePoint(decal, t6.zw).xyz;

	float d1=dot(abs(c00-c22),dt)+0.0001;
	float d2=dot(abs(c20-c02),dt)+0.0001;
	float hl=dot(abs(c01-c21),dt)+0.0001;
	float vl=dot(abs(c10-c12),dt)+0.0001;
	float m1=dot(abs(s00-s22),dt)+0.001;
	float m2=dot(abs(s02-s20),dt)+0.001;

	float3 t1_ = (hl*(c10+c12)+vl*(c01+c21)+(hl+vl)*c11)/(CONTRAST *(hl+vl));
	float3 t2_ = (d1*(c20+c02)+d2*(c00+c22)+(d1+d2)*c11)/(CONTRAST *(d1+d2));

	return float4(0.25*(t1_+t2_+(m2*(s00+s22)+m1*(s02+s20))/(m1+m2)),1.0);
}

float4 main_fragment(COMPAT_IN_FRAGMENT) : COMPAT_Output
{
	return four_xsoft(VOUT.t1, VOUT.t2, VOUT.t3, VOUT.t4, VOUT.t5, VOUT.t6, VOUT.texCoord, decal);
}
COMPAT_END