/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
   - FX11 compilers
*/

/*
   Copyright (C) 2010 Team XBMC
   http://www.xbmc.org
   Copyright (C) 2011 Stefanos A.
   http://www.opentk.com

This Program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This Program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with XBMC; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
http://www.gnu.org/copyleft/gpl.html

    From this forum post:
        http://board.byuu.org/viewtopic.php?p=33488#p33488

*/

#include "../../compat_includes.inc"
uniform COMPAT_Texture2D(decal) : TEXUNIT0;
uniform float4x4 modelViewProj;

struct out_vertex
{
	float4 position : COMPAT_POS;
	float2 texCoord : TEXCOORD0;
#ifndef HLSL_4
	float4 Color    : COLOR;
#endif
};

out_vertex main_vertex(COMPAT_IN_VERTEX)
{
	out_vertex OUT;
#ifdef HLSL_4
	float4 position = VIN.position;
	float2 texCoord = VIN.texCoord;
#else
	OUT.Color = color;
#endif
	OUT.position = mul(modelViewProj, position);
	OUT.texCoord = texCoord;
	
	return OUT;
}

#define FIX(c) max(abs(c), 1e-5);

const float PI = 3.1415926535897932384626433832795;

float3 weight3(float x)
{
   const float radius = 3.0;
   float3 sample = FIX(2.0 * PI * float3(x - 1.5, x - 0.5, x + 0.5));

   // Lanczos3. Note: we normalize outside this function, so no point in multiplying by radius.
   return /*radius **/ sin(sample) * sin(sample / radius) / (sample * sample);
}
	
float3 pixel(float xpos, float ypos, COMPAT_Texture2D(s_p))
{
   return COMPAT_SamplePoint(s_p, float2(xpos, ypos)).rgb;
}

float3 line_run(float ypos, float3 xpos1, float3 xpos2, float3 linetaps1, float3 linetaps2, COMPAT_Texture2D(s_p))
{
   return
      pixel(xpos1.r, ypos, s_p) * linetaps1.r +
      pixel(xpos1.g, ypos, s_p) * linetaps2.r +
      pixel(xpos1.b, ypos, s_p) * linetaps1.g +
      pixel(xpos2.r, ypos, s_p) * linetaps2.g +
      pixel(xpos2.g, ypos, s_p) * linetaps1.b +
      pixel(xpos2.b, ypos, s_p) * linetaps2.b; 
}

float4 lanczos6(float2 texture_size, float2 texCoord, COMPAT_Texture2D(decal))
{
   float2 stepxy = 1.0 / texture_size.xy;
   float2 pos = texCoord.xy + stepxy * 0.5;
   float2 f = frac(pos / stepxy);

   float3 linetaps1   = weight3(0.5 - f.x * 0.5);
   float3 linetaps2   = weight3(1.0 - f.x * 0.5);
   float3 columntaps1 = weight3(0.5 - f.y * 0.5);
   float3 columntaps2 = weight3(1.0 - f.y * 0.5);

   // make sure all taps added together is exactly 1.0, otherwise some
   // (very small) distortion can occur
   float suml = dot(linetaps1, float3(1,1,1)) + dot(linetaps2, float3(1,1,1));
   float sumc = dot(columntaps1, float3(1,1,1)) + dot(columntaps2, float3(1,1,1));
   linetaps1 /= suml;
   linetaps2 /= suml;
   columntaps1 /= sumc;
   columntaps2 /= sumc;

   float2 xystart = (-2.5 - f) * stepxy + pos;
   float3 xpos1 = float3(xystart.x, xystart.x + stepxy.x, xystart.x + stepxy.x * 2.0);
   float3 xpos2 = float3(xystart.x + stepxy.x * 3.0, xystart.x + stepxy.x * 4.0, xystart.x + stepxy.x * 5.0);

   // final sum and weight normalization
   return float4(
         line_run(xystart.y                 , xpos1, xpos2, linetaps1, linetaps2, decal) * columntaps1.r +
         line_run(xystart.y + stepxy.y      , xpos1, xpos2, linetaps1, linetaps2, decal) * columntaps2.r +
         line_run(xystart.y + stepxy.y * 2.0, xpos1, xpos2, linetaps1, linetaps2, decal) * columntaps1.g +
         line_run(xystart.y + stepxy.y * 3.0, xpos1, xpos2, linetaps1, linetaps2, decal) * columntaps2.g +
         line_run(xystart.y + stepxy.y * 4.0, xpos1, xpos2, linetaps1, linetaps2, decal) * columntaps1.b +
         line_run(xystart.y + stepxy.y * 5.0, xpos1, xpos2, linetaps1, linetaps2, decal) * columntaps2.b,1.0);
}

float4 main_fragment(COMPAT_IN_FRAGMENT) : COMPAT_Output
{
	return lanczos6(COMPAT_texture_size, VOUT.texCoord, decal);
}
COMPAT_END