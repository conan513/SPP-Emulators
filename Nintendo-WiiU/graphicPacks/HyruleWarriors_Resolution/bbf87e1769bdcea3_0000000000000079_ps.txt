#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader bbf87e1769bdcea3 //foreground blur?

const float dither = $dither ;
const float scaleShader = $scaleShader;
const float scaleBlur = ($scaleBlur*$internalRes);

const int sampleScale = 2;
const float lightBloom = 0.95; 

uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x1aa0b000 res 320x180x1 dim 1 tm: 4 format 0820 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem128;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;

// FabriceNeyret2 CC, single shader gaussian by intermediate MIPmap level. www.shadertoy.com/view/ltScRG
const int samples = 8 * sampleScale, //8 or 4 balances xy position
LOD = 2,         // gaussian done on MIPmap at scale LOD
sLOD = 1 << LOD; // tile size = 2^LOD
const float sigma = float(samples) * .25;

float gaussian(vec2 i) {
	return exp(-.5* dot(i /= sigma, i)) / (6.28 * sigma*sigma);
}

vec4 blur(sampler2D sp, vec2 U, vec2 scale) {
	vec4 O = vec4(0);
	int s = samples / sLOD;

	for (int i = 0; i < s*s; i++) {
		vec2 d = vec2(i%s, i / s)*float(sLOD) - float(samples) / 2.;
		O += gaussian(d) * textureLod(sp, U + scale * d, float(LOD));
	}

	return O / O.a;
}


int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
vec4 R0f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem128;

vec2 coord = passParameterSem128.xy*textureSize(textureUnitPS0, 0); //
vec2 ps = vec2(1.0) / textureSize(textureUnitPS0, 0);
vec2 uv = coord * ps;

R0f.xyz =	blur(textureUnitPS0, R0f.xy, ps*scaleBlur).xyz; //1.0 4k //.66 2k //0.075 1k //.51 4kx2

//R0f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
// 0
PV0f.x = R0f.z * intBitsToFloat(0x3dea747e);
PV0f.w = intBitsToFloat(uf_remappedPS[0].x);
PV0f.w = clamp(PV0f.w, 0.0, 1.0);
// 1
backupReg0f = R0f.x;
backupReg1f = R0f.y;
tempf.x = dot(vec4(backupReg0f,backupReg1f,PV0f.x,-0.0),vec4(intBitsToFloat(0x3e990abb),intBitsToFloat(0x3f162c13),1.0,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = -(PV0f.w) + intBitsToFloat(0x3f800054);
// 2
PV0f.z = PV1f.x + -(intBitsToFloat(uf_remappedPS[0].x));
PS0f = 1.0 / PS1f;
// 3
PV1f.w = PV0f.z * PS0f;
PV1f.w = clamp(PV1f.w, 0.0, 1.0);
// 4
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg2f = R0f.z;
R0f.x = mul_nonIEEE(backupReg0f, PV1f.w);
R0f.y = mul_nonIEEE(backupReg1f, PV1f.w);
R0f.z = mul_nonIEEE(backupReg2f, PV1f.w);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
