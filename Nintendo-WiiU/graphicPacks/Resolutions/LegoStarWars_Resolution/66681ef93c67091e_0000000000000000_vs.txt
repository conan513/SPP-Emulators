#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 66681ef93c67091e
// Used for: Bloom and motion blur
const float resXScale = ($width/$gameWidth);

uniform ivec4 uf_remappedVS[7];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
layout(location = 3) in uvec4 attrDataSem5;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem128;
layout(location = 1) out vec4 passParameterSem129;
layout(location = 2) out vec4 passParameterSem130;
layout(location = 3) out vec4 passParameterSem131;
layout(location = 4) out vec4 passParameterSem132;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xyz = attrDataSem0.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.xy = attrDataSem5.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
PV0f.z = -(R1f.y);
PV0f.z /= 2.0;
PV0f.w = R1f.x;
PV0f.w /= 2.0;
R0f.w = intBitsToFloat(uf_remappedVS[0].w);
PS0f = R0f.w;
// 1
PV1f.x = PV0f.z + 0.5;
PV1f.y = PV0f.w + 0.5;
R0f.z = intBitsToFloat(uf_remappedVS[0].z) * (intBitsToFloat(0x3e4cc000)/resXScale);
R2f.w = intBitsToFloat(uf_remappedVS[1].w);
R2f.z = intBitsToFloat(uf_remappedVS[1].z) * (intBitsToFloat(0x3e4cc000)/resXScale);
PS1f = R2f.z;
// 2
R127f.y = (mul_nonIEEE(PV1f.x,intBitsToFloat(uf_remappedVS[2].w)) + intBitsToFloat(uf_remappedVS[2].y));
PV0f.y = R127f.y;
R127f.z = (mul_nonIEEE(PV1f.y,intBitsToFloat(uf_remappedVS[2].z)) + intBitsToFloat(uf_remappedVS[2].x));
PV0f.z = R127f.z;
// 3
R127f.x = intBitsToFloat(uf_remappedVS[0].x) + PV0f.z;
R126f.y = intBitsToFloat(uf_remappedVS[1].y) + PV0f.y;
R126f.z = intBitsToFloat(uf_remappedVS[1].x) + PV0f.z;
R127f.w = intBitsToFloat(uf_remappedVS[0].y) + PV0f.y;
// 4
R126f.x = intBitsToFloat(uf_remappedVS[3].x) + R127f.z;
R125f.y = intBitsToFloat(uf_remappedVS[4].y) + R127f.y;
R125f.z = intBitsToFloat(uf_remappedVS[4].x) + R127f.z;
R126f.w = intBitsToFloat(uf_remappedVS[3].y) + R127f.y;
// 5
R125f.x = intBitsToFloat(uf_remappedVS[5].x) + R127f.z;
R3f.z = intBitsToFloat(uf_remappedVS[3].z) * (intBitsToFloat(0x3e4cc000)/resXScale);
R125f.w = intBitsToFloat(uf_remappedVS[5].y) + R127f.y;
R3f.w = intBitsToFloat(uf_remappedVS[3].w);
PS1f = R3f.w;
// 6
R0f.x = (mul_nonIEEE(R127f.x,intBitsToFloat(uf_remappedVS[6].x)) + intBitsToFloat(uf_remappedVS[6].z));
R0f.y = (mul_nonIEEE(R127f.w,intBitsToFloat(uf_remappedVS[6].y)) + intBitsToFloat(uf_remappedVS[6].w));
R2f.x = (mul_nonIEEE(R126f.z,intBitsToFloat(uf_remappedVS[6].x)) + intBitsToFloat(uf_remappedVS[6].z));
PS0f = R2f.x;
// 7
R3f.x = (mul_nonIEEE(R126f.x,intBitsToFloat(uf_remappedVS[6].x)) + intBitsToFloat(uf_remappedVS[6].z));
R2f.y = (mul_nonIEEE(R126f.y,intBitsToFloat(uf_remappedVS[6].y)) + intBitsToFloat(uf_remappedVS[6].w));
R3f.y = (mul_nonIEEE(R126f.w,intBitsToFloat(uf_remappedVS[6].y)) + intBitsToFloat(uf_remappedVS[6].w));
PS1f = R3f.y;
// 8
R4f.z = intBitsToFloat(uf_remappedVS[4].z) * (intBitsToFloat(0x3e4cc000)/resXScale);
R4f.w = intBitsToFloat(uf_remappedVS[4].w);
R5f.w = intBitsToFloat(uf_remappedVS[5].w);
PS0f = R5f.w;
// 9
R4f.x = (mul_nonIEEE(R125f.z,intBitsToFloat(uf_remappedVS[6].x)) + intBitsToFloat(uf_remappedVS[6].z));
R4f.y = (mul_nonIEEE(R125f.y,intBitsToFloat(uf_remappedVS[6].y)) + intBitsToFloat(uf_remappedVS[6].w));
R5f.x = (mul_nonIEEE(R125f.x,intBitsToFloat(uf_remappedVS[6].x)) + intBitsToFloat(uf_remappedVS[6].z));
PS1f = R5f.x;
// 10
R5f.y = (mul_nonIEEE(R125f.w,intBitsToFloat(uf_remappedVS[6].y)) + intBitsToFloat(uf_remappedVS[6].w));
// 11
R5f.z = intBitsToFloat(uf_remappedVS[5].z) * (intBitsToFloat(0x3e4cc000)/resXScale);
// export
gl_Position = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
// export
passParameterSem128 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
// export
passParameterSem129 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
// export
passParameterSem130 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
// export
passParameterSem131 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
// export
passParameterSem132 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
}
