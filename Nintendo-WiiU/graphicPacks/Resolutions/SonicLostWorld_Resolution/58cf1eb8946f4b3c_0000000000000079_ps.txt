#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 58cf1eb8946f4b3c
const float resXScale = ($width/$gameWidth); 
const float resYScale = ($height/$gameHeight); 
uniform ivec4 uf_remappedPS[3];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4aec000 res 640x360x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem136;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R123f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem136;
// 0
R1f.x = R0f.x + intBitsToFloat(uf_remappedPS[0].x) / resXScale;
R1f.y = R0f.y + intBitsToFloat(uf_remappedPS[0].y) / resYScale;
R0f.z = R0f.x + intBitsToFloat(uf_remappedPS[0].z);
R0f.w = R0f.y + intBitsToFloat(uf_remappedPS[0].w);
// 1
backupReg0f = R0f.x;
backupReg1f = R0f.y;
R0f.x = backupReg0f + intBitsToFloat(uf_remappedPS[1].x) / resXScale;
R0f.y = backupReg1f + intBitsToFloat(uf_remappedPS[1].y) / resYScale;
R1f.xyzw = (texture(textureUnitPS0, R1f.xy).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R0f.zw).xyzw);
R0f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
// 0
PV0f.x = mul_nonIEEE(R1f.w, intBitsToFloat(uf_remappedPS[2].x));
PV0f.y = mul_nonIEEE(R1f.z, intBitsToFloat(uf_remappedPS[2].x));
PV0f.z = mul_nonIEEE(R1f.y, intBitsToFloat(uf_remappedPS[2].x));
PV0f.w = mul_nonIEEE(R1f.x, intBitsToFloat(uf_remappedPS[2].x));
// 1
R123f.x = (mul_nonIEEE(R2f.w,intBitsToFloat(uf_remappedPS[2].y)) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedPS[2].y)) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[2].y)) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[2].y)) + PV0f.w);
PV1f.w = R123f.w;
// 2
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg2f = R0f.z;
backupReg3f = R0f.w;
R0f.x = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[2].z)) + PV1f.w);
R0f.y = (mul_nonIEEE(backupReg1f,intBitsToFloat(uf_remappedPS[2].z)) + PV1f.z);
R0f.z = (mul_nonIEEE(backupReg2f,intBitsToFloat(uf_remappedPS[2].z)) + PV1f.y);
R0f.w = (mul_nonIEEE(backupReg3f,intBitsToFloat(uf_remappedPS[2].z)) + PV1f.x);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
