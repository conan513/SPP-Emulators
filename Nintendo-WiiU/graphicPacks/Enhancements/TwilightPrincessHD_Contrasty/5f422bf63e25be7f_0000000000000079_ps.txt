#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 5f422bf63e25be7f // Bleach pass cutscene

const float bleach = $bleach;

uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x24dfb000 res 960x540x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem1;
R0f.w = (texture(textureUnitPS0, R0f.xy).x);
// 0
PV0f.x = intBitsToFloat(uf_remappedPS[0].x) * intBitsToFloat(0x3f7f0000);
PV0f.z = intBitsToFloat(uf_remappedPS[0].z) * intBitsToFloat(0x3f7f0000);
PV0f.w = intBitsToFloat(uf_remappedPS[0].y) * intBitsToFloat(0x3f7f0000);
R1f.w = intBitsToFloat(uf_remappedPS[0].w);
R1f.w = clamp(R1f.w, 0.0, 1.0);
PS0f = R1f.w;
// 1
PV1f.x = fract(PV0f.w);
PV1f.y = fract(PV0f.x);
PV1f.w = fract(PV0f.z);
// 2
PV0f.x = PV1f.w * intBitsToFloat(0x3f808081);
PV0f.y = PV1f.x * intBitsToFloat(0x3f808081);
PV0f.z = PV1f.y * intBitsToFloat(0x3f808081);
// 3
R1f.x = mul_nonIEEE(R0f.w, PV0f.z);
R1f.x = clamp(R1f.x, 0.0, 1.0);
R1f.y = mul_nonIEEE(R0f.w, PV0f.y);
R1f.y = clamp(R1f.y, 0.0, 1.0);
R1f.z = mul_nonIEEE(R0f.w, PV0f.x);
R1f.z = clamp(R1f.z, 0.0, 1.0);
// export
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w) * bleach;
}
